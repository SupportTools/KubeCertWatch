# Default values for kubecertwatch
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

settings:
  debug: false
  metrics:
    enabled: true
    port: 9990
  cronSchedule: "0 */12 * * *" # Check every 12 hours by default
  clusterName: "default-cluster" # Required: must be set by user

# Cert-manager integration
cert-manager:
  enabled: false # Set to true to enable cert-manager certificate monitoring
  # If you have cert-manager already installed, you can set this to false
  # and just provide the necessary RBAC permissions for KubeCertWatch

replicaCount: 1
image:
  repository: supporttools/kubecertwatch
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "kubecertwatch"

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
